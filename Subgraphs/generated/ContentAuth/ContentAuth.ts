// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContentDisputeRaised extends ethereum.Event {
  get params(): ContentDisputeRaised__Params {
    return new ContentDisputeRaised__Params(this);
  }
}

export class ContentDisputeRaised__Params {
  _event: ContentDisputeRaised;

  constructor(event: ContentDisputeRaised) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get disputor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get disputeCid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ContentQueuedForVerification extends ethereum.Event {
  get params(): ContentQueuedForVerification__Params {
    return new ContentQueuedForVerification__Params(this);
  }
}

export class ContentQueuedForVerification__Params {
  _event: ContentQueuedForVerification;

  constructor(event: ContentQueuedForVerification) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contentCID(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ContentVerificationFeeUpdated extends ethereum.Event {
  get params(): ContentVerificationFeeUpdated__Params {
    return new ContentVerificationFeeUpdated__Params(this);
  }
}

export class ContentVerificationFeeUpdated__Params {
  _event: ContentVerificationFeeUpdated;

  constructor(event: ContentVerificationFeeUpdated) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContentVerificationTimelockUpdated extends ethereum.Event {
  get params(): ContentVerificationTimelockUpdated__Params {
    return new ContentVerificationTimelockUpdated__Params(this);
  }
}

export class ContentVerificationTimelockUpdated__Params {
  _event: ContentVerificationTimelockUpdated;

  constructor(event: ContentVerificationTimelockUpdated) {
    this._event = event;
  }

  get timelock(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContentVerified extends ethereum.Event {
  get params(): ContentVerified__Params {
    return new ContentVerified__Params(this);
  }
}

export class ContentVerified__Params {
  _event: ContentVerified;

  constructor(event: ContentVerified) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DisputeAccepted extends ethereum.Event {
  get params(): DisputeAccepted__Params {
    return new DisputeAccepted__Params(this);
  }
}

export class DisputeAccepted__Params {
  _event: DisputeAccepted;

  constructor(event: DisputeAccepted) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DisputeRejected extends ethereum.Event {
  get params(): DisputeRejected__Params {
    return new DisputeRejected__Params(this);
  }
}

export class DisputeRejected__Params {
  _event: DisputeRejected;

  constructor(event: DisputeRejected) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinimumValidatorRequiredUpdated extends ethereum.Event {
  get params(): MinimumValidatorRequiredUpdated__Params {
    return new MinimumValidatorRequiredUpdated__Params(this);
  }
}

export class MinimumValidatorRequiredUpdated__Params {
  _event: MinimumValidatorRequiredUpdated;

  constructor(event: MinimumValidatorRequiredUpdated) {
    this._event = event;
  }

  get number(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SupportingValidatorAdded extends ethereum.Event {
  get params(): SupportingValidatorAdded__Params {
    return new SupportingValidatorAdded__Params(this);
  }
}

export class SupportingValidatorAdded__Params {
  _event: SupportingValidatorAdded;

  constructor(event: SupportingValidatorAdded) {
    this._event = event;
  }

  get contentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get validator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ValidatorAdded extends ethereum.Event {
  get params(): ValidatorAdded__Params {
    return new ValidatorAdded__Params(this);
  }
}

export class ValidatorAdded__Params {
  _event: ValidatorAdded;

  constructor(event: ValidatorAdded) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ValidatorRemoved extends ethereum.Event {
  get params(): ValidatorRemoved__Params {
    return new ValidatorRemoved__Params(this);
  }
}

export class ValidatorRemoved__Params {
  _event: ValidatorRemoved;

  constructor(event: ValidatorRemoved) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ContentAuth__contentInfoResult {
  value0: Bytes;
  value1: Address;
  value2: Address;
  value3: i32;

  constructor(value0: Bytes, value1: Address, value2: Address, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getContentHash(): Bytes {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getDisputorAddress(): Address {
    return this.value2;
  }

  getStatus(): i32 {
    return this.value3;
  }
}

export class ContentAuth__getContentInfoResultValue0Struct extends ethereum.Tuple {
  get contentHash(): Bytes {
    return this[0].toBytes();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get disputorAddress(): Address {
    return this[2].toAddress();
  }

  get supportingValidator(): Array<Address> {
    return this[3].toAddressArray();
  }

  get status(): i32 {
    return this[4].toI32();
  }
}

export class ContentAuth extends ethereum.SmartContract {
  static bind(address: Address): ContentAuth {
    return new ContentAuth("ContentAuth", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contentInfo(param0: Bytes): ContentAuth__contentInfoResult {
    let result = super.call(
      "contentInfo",
      "contentInfo(bytes32):(bytes32,address,address,uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new ContentAuth__contentInfoResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32()
    );
  }

  try_contentInfo(
    param0: Bytes
  ): ethereum.CallResult<ContentAuth__contentInfoResult> {
    let result = super.tryCall(
      "contentInfo",
      "contentInfo(bytes32):(bytes32,address,address,uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ContentAuth__contentInfoResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32()
      )
    );
  }

  contentVerificationFee(): BigInt {
    let result = super.call(
      "contentVerificationFee",
      "contentVerificationFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contentVerificationFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contentVerificationFee",
      "contentVerificationFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contentVerificationTimelock(): BigInt {
    let result = super.call(
      "contentVerificationTimelock",
      "contentVerificationTimelock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contentVerificationTimelock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contentVerificationTimelock",
      "contentVerificationTimelock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContentInfo(
    contentHash: Bytes
  ): ContentAuth__getContentInfoResultValue0Struct {
    let result = super.call(
      "getContentInfo",
      "getContentInfo(bytes32):((bytes32,address,address,address[],uint8))",
      [ethereum.Value.fromFixedBytes(contentHash)]
    );

    return changetype<ContentAuth__getContentInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getContentInfo(
    contentHash: Bytes
  ): ethereum.CallResult<ContentAuth__getContentInfoResultValue0Struct> {
    let result = super.tryCall(
      "getContentInfo",
      "getContentInfo(bytes32):((bytes32,address,address,address[],uint8))",
      [ethereum.Value.fromFixedBytes(contentHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ContentAuth__getContentInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getContentVerificationStatus(contentHash: Bytes): i32 {
    let result = super.call(
      "getContentVerificationStatus",
      "getContentVerificationStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(contentHash)]
    );

    return result[0].toI32();
  }

  try_getContentVerificationStatus(
    contentHash: Bytes
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getContentVerificationStatus",
      "getContentVerificationStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(contentHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumValidatorSignatureRequired(): BigInt {
    let result = super.call(
      "minimumValidatorSignatureRequired",
      "minimumValidatorSignatureRequired():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumValidatorSignatureRequired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumValidatorSignatureRequired",
      "minimumValidatorSignatureRequired():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validatorSet(param0: Address): boolean {
    let result = super.call("validatorSet", "validatorSet(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_validatorSet(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("validatorSet", "validatorSet(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddContentForVerificationCall extends ethereum.Call {
  get inputs(): AddContentForVerificationCall__Inputs {
    return new AddContentForVerificationCall__Inputs(this);
  }

  get outputs(): AddContentForVerificationCall__Outputs {
    return new AddContentForVerificationCall__Outputs(this);
  }
}

export class AddContentForVerificationCall__Inputs {
  _call: AddContentForVerificationCall;

  constructor(call: AddContentForVerificationCall) {
    this._call = call;
  }

  get contentHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get contentCid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddContentForVerificationCall__Outputs {
  _call: AddContentForVerificationCall;

  constructor(call: AddContentForVerificationCall) {
    this._call = call;
  }
}

export class AddValidatorCall extends ethereum.Call {
  get inputs(): AddValidatorCall__Inputs {
    return new AddValidatorCall__Inputs(this);
  }

  get outputs(): AddValidatorCall__Outputs {
    return new AddValidatorCall__Outputs(this);
  }
}

export class AddValidatorCall__Inputs {
  _call: AddValidatorCall;

  constructor(call: AddValidatorCall) {
    this._call = call;
  }

  get validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddValidatorCall__Outputs {
  _call: AddValidatorCall;

  constructor(call: AddValidatorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeContentVerificationFeeCall extends ethereum.Call {
  get inputs(): ChangeContentVerificationFeeCall__Inputs {
    return new ChangeContentVerificationFeeCall__Inputs(this);
  }

  get outputs(): ChangeContentVerificationFeeCall__Outputs {
    return new ChangeContentVerificationFeeCall__Outputs(this);
  }
}

export class ChangeContentVerificationFeeCall__Inputs {
  _call: ChangeContentVerificationFeeCall;

  constructor(call: ChangeContentVerificationFeeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeContentVerificationFeeCall__Outputs {
  _call: ChangeContentVerificationFeeCall;

  constructor(call: ChangeContentVerificationFeeCall) {
    this._call = call;
  }
}

export class ChangeContentVerificationTimelockCall extends ethereum.Call {
  get inputs(): ChangeContentVerificationTimelockCall__Inputs {
    return new ChangeContentVerificationTimelockCall__Inputs(this);
  }

  get outputs(): ChangeContentVerificationTimelockCall__Outputs {
    return new ChangeContentVerificationTimelockCall__Outputs(this);
  }
}

export class ChangeContentVerificationTimelockCall__Inputs {
  _call: ChangeContentVerificationTimelockCall;

  constructor(call: ChangeContentVerificationTimelockCall) {
    this._call = call;
  }

  get newTimelock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeContentVerificationTimelockCall__Outputs {
  _call: ChangeContentVerificationTimelockCall;

  constructor(call: ChangeContentVerificationTimelockCall) {
    this._call = call;
  }
}

export class ChangeMinimumValidatorVerificationCall extends ethereum.Call {
  get inputs(): ChangeMinimumValidatorVerificationCall__Inputs {
    return new ChangeMinimumValidatorVerificationCall__Inputs(this);
  }

  get outputs(): ChangeMinimumValidatorVerificationCall__Outputs {
    return new ChangeMinimumValidatorVerificationCall__Outputs(this);
  }
}

export class ChangeMinimumValidatorVerificationCall__Inputs {
  _call: ChangeMinimumValidatorVerificationCall;

  constructor(call: ChangeMinimumValidatorVerificationCall) {
    this._call = call;
  }

  get validatatorRequired(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinimumValidatorVerificationCall__Outputs {
  _call: ChangeMinimumValidatorVerificationCall;

  constructor(call: ChangeMinimumValidatorVerificationCall) {
    this._call = call;
  }
}

export class RaiseDisputeCall extends ethereum.Call {
  get inputs(): RaiseDisputeCall__Inputs {
    return new RaiseDisputeCall__Inputs(this);
  }

  get outputs(): RaiseDisputeCall__Outputs {
    return new RaiseDisputeCall__Outputs(this);
  }
}

export class RaiseDisputeCall__Inputs {
  _call: RaiseDisputeCall;

  constructor(call: RaiseDisputeCall) {
    this._call = call;
  }

  get contentHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get disputeCid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RaiseDisputeCall__Outputs {
  _call: RaiseDisputeCall;

  constructor(call: RaiseDisputeCall) {
    this._call = call;
  }
}

export class RemoveValidatorCall extends ethereum.Call {
  get inputs(): RemoveValidatorCall__Inputs {
    return new RemoveValidatorCall__Inputs(this);
  }

  get outputs(): RemoveValidatorCall__Outputs {
    return new RemoveValidatorCall__Outputs(this);
  }
}

export class RemoveValidatorCall__Inputs {
  _call: RemoveValidatorCall;

  constructor(call: RemoveValidatorCall) {
    this._call = call;
  }

  get validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveValidatorCall__Outputs {
  _call: RemoveValidatorCall;

  constructor(call: RemoveValidatorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResolveDisputeCall extends ethereum.Call {
  get inputs(): ResolveDisputeCall__Inputs {
    return new ResolveDisputeCall__Inputs(this);
  }

  get outputs(): ResolveDisputeCall__Outputs {
    return new ResolveDisputeCall__Outputs(this);
  }
}

export class ResolveDisputeCall__Inputs {
  _call: ResolveDisputeCall;

  constructor(call: ResolveDisputeCall) {
    this._call = call;
  }

  get contentHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get isDisputeAccepted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get validator(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class ResolveDisputeCall__Outputs {
  _call: ResolveDisputeCall;

  constructor(call: ResolveDisputeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyContentCall extends ethereum.Call {
  get inputs(): VerifyContentCall__Inputs {
    return new VerifyContentCall__Inputs(this);
  }

  get outputs(): VerifyContentCall__Outputs {
    return new VerifyContentCall__Outputs(this);
  }
}

export class VerifyContentCall__Inputs {
  _call: VerifyContentCall;

  constructor(call: VerifyContentCall) {
    this._call = call;
  }

  get contentHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class VerifyContentCall__Outputs {
  _call: VerifyContentCall;

  constructor(call: VerifyContentCall) {
    this._call = call;
  }
}
